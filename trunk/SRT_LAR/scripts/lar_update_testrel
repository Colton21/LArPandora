#!/usr/bin/perl

$debug_level      = 0;
$skip_cvs_command = 0;
$skip_sys_command = 0;

use Getopt::Long;
Getopt::Long::config('bundling_override');

my %options;
GetOptions(\%options, 'rel=s', 'help','h');

if ((defined $options{'h'}) || (defined $options{'help'})) {
  print_help();
}
if (defined $options{'rel'}) {
  $release = $options{'rel'};
}

my $cvsRoot= $options{'cvsrepo'};
if ( !(defined $cvsRoot)) {
# look in the envirnment for it
    $cvsRoot = $ENV{'CVSROOT'};
}
if ( !(defined $cvsRoot)) {
# last chance -hardwire to what should be the default.
    $cvsRoot = 'svn+ssh://p-larsoftsvn@cdcvs.fnal.gov/cvs/projects/larsoftsvn/';
}

$ENV{'CVSROOT'} = $cvsRoot;

if (! (defined $ENV{'SRT_DIST'})) {
  print "SRT_DIST variable is not defined! Source srt/srt.[c]sh first.\n";
  print "Release $release not updated.\n";
  exit(0);
}

$SRT_DIST    = $ENV{"SRT_DIST"};
$SRT_PRIVATE = $ENV{"SRT_PRIVATE_CONTEXT"};
$release_dir = "$SRT_PRIVATE";

if ($release_dir eq "./") {
  print "No test release defined with srt_setup -a, bail\n";
  exit(0);
}    
if (! (-e "$release_dir") ) {
  print "No $SRT_PRIVATE_COTNEXT defined, bail\n";
  exit(0);
}
else {
  print "Updating '$release_dir'\n";
}

make_package_list();
for ($i=0; $i<$npackage; ++$i) {
  $package = @package_list[$i];
  $version = @version_list[$i];
  update_package(); 
}

#.......................................................................

sub print_help {
  print "**********************************************************************\n";
  print "*                                                                    *\n";
  print "*     Script to update a release that has already been imported.     *\n";
  print "*        Only packages which use HEAD version will be updated.        *\n";
  print "*                                                                    *\n";
  print "*    Recognized arguments:                                           *\n";
  print "*       -h or --help: print this message                             *\n";
  print "*       -rel <release>: specify release to be updated                *\n";
  print "*                                                                    *\n";
  print "**********************************************************************\n";
  exit(0);
}

#.......................................................................

sub do_sys_command {
#
# Perform system command, but only if flag is set.
#
  if ($skip_sys_command>0 || $debug_level>1) {
    print "% $_[0]\n";
  }
  if ($skip_sys_command==0) {
    system($_[0]);
  }
}

#.......................................................................

sub do_cvs_command {
#
# Perform cvs system command, but only if flag is set.
#
  if ($skip_cvs_command>0 || $debug_level>1) {
    print "% $_[0]\n";
  }
  if ($skip_cvs_command==0) {
    system($_[0]);
  }
}

#.......................................................................

sub update_package() {
#
# CVS update a package in the release. If it does not exist, use
# addpkg to add it to the release
#
    $cvsupdate_cmd = "svn update";
  #
  # Handle SoftRelTools separately since it comes from a different
  # repository
  #
    if ($package eq "SoftRelTools") {
       print "handling SoftRelTools\n";
       $cvsupdate_cmd = "cvs update -d";
    }
    
  #
  # Handle the nutools packages
  #
   if ($package eq "EventDisplayBase" ) {
       $cvsupdate_cmd = "cvs update -d";
   }      
   if ($package eq "EventGeneratorBase" ) {
       $cvsupdate_cmd = "cvs update -d";
   }      
   if ($package eq "G4Base" ) {
       $cvsupdate_cmd = "cvs update -d";
   }      
   if ($package eq "MagneticField" ) {
       $cvsupdate_cmd = "cvs update -d";
   }      
   if ($package eq "SimulationBase" ) {
       $cvsupdate_cmd = "cvs update -d";
   }      
            
  chdir("$release_dir");
  print "Updating package $release_dir/$package\n";
  if (-e "$package") {
      chdir("$package");
      do_sys_command($cvsupdate_cmd);
  }
}

#.......................................................................

sub make_package_list {
#
# Fill the package and tag arrays with contents of respective 
# setup/packages-<release> file
#
  $n = 0;
  print "open $SRT_DIST/setup/packages-$release\n";
  open(PKG_FILE,"$SRT_DIST/setup/packages-$release");
  PKG : while (<PKG_FILE>) {
    $line = $_;
    if ( index($line,"#") == -1 ) {
      @f  = split(/:/,$line);
      print @f[0];
      print "\n";
      $nf = @f;
      if ($nf == 2) {
        $version = @f[1];
      }
      else {
        $version = "HEAD";
      }
      @f[0]    =~ s/\s+?$//; # Removes trailing white space
      $version =~ s/\s+?$//; # Removes trailing white space
      $version =~ s/^\s+//;  # Removes leading white space
      $package_list[$n] = @f[0];
      $version_list[$n] = $version;
      ++$n; 
    }
  }
  $npackage = $n;
  if ($debug_level>1) {
    for ($i=0; $i<$n; ++$i) {
      print "Package $package_list[$i]:$version_list[$i] is in list\n";
    }
  }
}
########################################################################
